{frontmatter}

# Introduction

This book is intended for JavaScript developers looking to build complex and intuitive front-end applications, specifically Single Page Apps, often abbreviated to SPA.

It derives from an earlier work that used the PHP framework Laravel as a base of knowledge, and compared the patterns and features with Ember, not as an alternative, but as a complementary technology. Much of that approach is still valid now. Ember is an excellent fit for the mentality of someone with a good knowledge of backend languages and approaches in frameworks such as Rails, Phoenix, Django, or indeed Laravel.

If you've run across this and don't actually know Laravel or any of these other frameworks, you don't need to worry. This is strongly focused on Ember alone.

## Why the Backend framework comparison matters

People often choose a framework for the backend based on a number of extremely valid reasons. Most particularly, comprehensive tools, aka "monoliths" or "batteries included" frameworks provide extensive features and design patterns and architecture that simplify more complex application development.

Providing this integrated environment and a well established ecosystem of community solutions is accepted as a powerful benefit of frameworks such as Rails or Symfony.

Yet somehow when people look at frontend frameworks those arguments are abandoned in favour of a collection of libraries creating an ad hoc framework.

With Ember, the parallels with something like Laravel are strong and seemingly obvious. They are highly opinionated MVC frameworks. Both include a comprehensive range of integrated features. Both incorporate a lot of functionality into a powerful CLI utility. Both are inspired by and derived from Rails. Both include comprehensive routers. They support clear separation of concerns. They both use discrete templates with custom templating DSLs. They both have similar attitudes to rational defaults, to convention over configuration, to testing, and to eliminating unnecessary code.

All the same arguments for Laravel can be made for Ember. An Ember application means treating the frontend with the same respect as the backend, and acknowledging JavaScript as a powerful and capable application platform in its own rights - not just decoration on the backend.

## Why Ember?

The first thing to talk about is the obvious one. Why Ember? Why use Ember instead of the other frameworks around, such as VueJS, Angular, or React? Everyone has things they do and don't like about them, and one person's con can be an person's pro. The reason that I like Ember is that I find it an excellent way to be extremely productive very quickly. To my mind, this is what a framework is for.

Ember is entirely built around the paradigm of the Single Page App. As Ember's webpage calls it, an "a framework for ambitious web developers". Ambitious as used here doesn't refer to being the next Facebook. A single page app has to handle a lot of different requirements, such as routing, state management, HTTP access, authentication, templating, acceptance testing, string formatting, and so on. All of this is built into Ember. Ember is great at building SPAs.

It's a lot less good at other things, though. Not all JavaScript is an SPA. A lot of the time, complex JavaScript is implemented inside an existing app, which is not a good fit for Ember.

The long term intention here is to build two SPAs with Ember. The first one, and the one covered by this book, is a simple app to get our feet wet in a basic Ember implementation.

We might well create a more complex application in a later addition, but a simple app will be made first to cover a lot of the getting started process, and familiarise ourselves with Ember's conventions and architecture.

{mainmatter}